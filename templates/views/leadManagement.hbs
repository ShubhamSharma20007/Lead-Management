<!doctype html>
<html lang="en">

<head>

  <style>
    dialog {
      width: 40%;
      min-height: 30%;
      position: absolute;
      border: 1px solid lightgray;
      border-radius: 10px;
      padding: 20px;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
    }

    input::-webkit-outer-spin-button,
    input::-webkit-inner-spin-button {
      -webkit-appearance: none;
      margin: 0;
    }

    .new-class {
      text-transform: capitalize;
    }

    #lableName {
      border: 1px solid rgb(185, 185, 185);
      height: 40px;
    }

    .form-control {
      height: 40px !important;
      border: 1px solid rgb(235, 233, 233);
    }

    .board-item-content {
      min-height: 200px;
      max-height: 300px !important;
      overflow-y: scroll !important;
      font-family: "Overpass", sans-serif !important;
      background: #faebd7b5 !important;
      font-size: 0.999rem !important;
      border-radius: 8px !important;
      line-height: 1.5;
      background-image: url(https://node.scaleedge.in/assets/images/dashboard/circle.svg) !important;
      background-position: start;
      background-size: cover !important;
      background-repeat: no-repeat;
    }

    .board-item-content::-webkit-scrollbar {
      width: 0px
    }

    .slide-container::-webkit-scrollbar {

      height: 9px;
    }

    .slide-container::-webkit-scrollbar-thumb {
      background-color: #8888888f;
      border-radius: 10px;
    }

    .slide-container::-webkit-scrollbar-track {
      background-color: #f1f1f1;
      border-radius: 10px;
    }
  </style>
</head>

<body class="vertical  light  ">
  <div class="wrapper">
    {{>Sidebar}}
    <main role="main" class="main-content">
      <div class="content-body p-0">
        <div class="container-fluid p-0">
          <div class="col-lg-12">
            <div class="card bg-transparent box-shadow-none border-0 ">
              <div class="drag-container"></div>
              <div class="board-container" ondrop="drop(event)" ondragover="allowDrop(event)">
                <div class="d-flex slide-container" style="overflow-x: auto; width:100%; height:100%;gap:20px">
                  <div class="board-column todo">
                    <div class="board-column-container">
                      <div class="board-column-header" data-target-status="New Lead">New Lead({{ newLeads.length }})
                      </div>
                      <div class="board-column-content-wrapper">
                        <div class="board-column-content">
                          {{#each newLeads}}
                          <div class="board-item">
                            <div class="board-item-content">
                              <div class="inner-section" draggable="true" ondragstart="drag(event)"
                                data-card-id="{{this.id}}" data-target-status="{{target_status}}">
                                {{#each this.dataValues}}
                                <p>{{@key}}: {{this}}</p>
                                {{/each}}
                              </div>
                            </div>
                          </div>
                          {{/each}}
                        </div>
                      </div>
                    </div>
                  </div>
                  <div class="board-column working">
                    <div class="board-column-container">
                      <div class="board-column-header" data-target-status="Contact Initiation">Contact Initiation({{
                        contactInitiation.length }})</div>
                      <div class="board-column-content-wrapper">
                        <div class="board-column-content">
                          {{#each contactInitiation}}
                          <div class="board-item">
                            <div class="board-item-content">
                              <div class="inner-section" draggable="true" ondragstart="drag(event)"
                                data-card-id="{{this.id}}" data-target-status="{{target_status}}">
                                {{#each this.dataValues}}
                                <p>{{@key}}: {{this}}</p>
                                {{/each}}
                              </div>
                            </div>
                          </div>
                          {{/each}}
                        </div>
                      </div>
                    </div>
                  </div>
                  <div class="board-column todo">
                    <div class="board-column-container">
                      <div class="board-column-header" data-target-status="Schedule Follow Up">Schedule Follow Up({{
                        scheduleFollowUp.length }})</div>
                      <div class="board-column-content-wrapper">
                        <div class="board-column-content">
                          {{#each scheduleFollowUp}}
                          <div class="board-item">
                            <div class="board-item-content">
                              <div class="inner-section" draggable="true" ondragstart="drag(event)"
                                data-card-id="{{this.id}}" data-target-status="{{target_status}}">
                                {{#each this.dataValues}}
                                <p>{{@key}}: {{this}}</p>
                                {{/each}}
                              </div>

                            </div>
                          </div>
                          {{/each}}
                        </div>
                      </div>
                    </div>
                  </div>

                </div>

              </div>
            </div>

          </div>
        </div>

      </div>
    </main> <!-- main -->
  </div> <!-- .wrapper -->
  <script src="js/jquery.min.js"></script>
  <script src="js/popper.min.js"></script>
  <script src="js/moment.min.js"></script>
  <script src="js/bootstrap.min.js"></script>
  <script src="js/simplebar.min.js"></script>
  <script src='js/daterangepicker.js'></script>
  <script src='js/jquery.stickOnScroll.js'></script>
  <script src="js/tinycolor-min.js"></script>
  <script src="js/config.js"></script>
  <script src="js/d3.min.js"></script>
  <script src="js/topojson.min.js"></script>
  <script src="js/datamaps.all.min.js"></script>
  <script src="js/datamaps-zoomto.js"></script>
  <script src="js/datamaps.custom.js"></script>
  <script src="js/Chart.min.js"></script>
  <script>
    /* defind global options */
    Chart.defaults.global.defaultFontFamily = base.defaultFontFamily;
    Chart.defaults.global.defaultFontColor = colors.mutedColor;
  </script>
  <script src="js/gauge.min.js"></script>
  <script src="js/jquery.sparkline.min.js"></script>
  <script src="js/apexcharts.min.js"></script>
  <script src="js/apexcharts.custom.js"></script>
  <script src='js/jquery.mask.min.js'></script>
  <script src='js/select2.min.js'></script>
  <script src='js/jquery.steps.min.js'></script>
  <script src='js/jquery.validate.min.js'></script>
  <script src='js/jquery.timepicker.js'></script>
  <script src='js/dropzone.min.js'></script>
  <script src='js/uppy.min.js'></script>
  <script src='js/quill.min.js'></script>
  <script src='js/new.js'></script>
  <script src="https://cdn.jsdelivr.net/npm/muuri@0.9.5/dist/muuri.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/web-animations-js@2.3.2/web-animations.min.js"></script>

  <script>
    function allowDrop(ev) {
      ev.preventDefault();
    }

    function drag(ev) {
      ev.dataTransfer.setData("text", ev.target.id);
      console.log(ev.target.children)
    }

    function drop(ev) {
      ev.preventDefault();
      var data = ev.dataTransfer.getData("text");
      // Find the closest drop target by traversing up the DOM tree
      var dropTarget = ev.target.closest('.board-column-content-wrapper');
      if (dropTarget) {
        dropTarget.appendChild(document.getElementById(data));
        console.log("drop");
     
      }
    }
  </script>




  <script>
    $('.select2').select2(
      {
        theme: 'bootstrap4',
      });
    $('.select2-multi').select2(
      {
        multiple: true,
        theme: 'bootstrap4',
      });
    $('.drgpicker').daterangepicker(
      {
        singleDatePicker: true,
        timePicker: false,
        showDropdowns: true,
        locale:
        {
          format: 'MM/DD/YYYY'
        }
      });
    $('.time-input').timepicker(
      {
        'scrollDefault': 'now',
        'zindex': '9999' /* fix modal open */
      });
    /** date range picker */
    if ($('.datetimes').length) {
      $('.datetimes').daterangepicker(
        {
          timePicker: true,
          startDate: moment().startOf('hour'),
          endDate: moment().startOf('hour').add(32, 'hour'),
          locale:
          {
            format: 'M/DD hh:mm A'
          }
        });
    }
    var start = moment().subtract(29, 'days');
    var end = moment();

    function cb(start, end) {
      $('#reportrange span').html(start.format('MMMM D, YYYY') + ' - ' + end.format('MMMM D, YYYY'));
    }
    $('#reportrange').daterangepicker(
      {
        startDate: start,
        endDate: end,
        ranges:
        {
          'Today': [moment(), moment()],
          'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
          'Last 7 Days': [moment().subtract(6, 'days'), moment()],
          'Last 30 Days': [moment().subtract(29, 'days'), moment()],
          'This Month': [moment().startOf('month'), moment().endOf('month')],
          'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
        }
      }, cb);
    cb(start, end);
    $('.input-placeholder').mask("00/00/0000",
      {
        placeholder: "__/__/____"
      });
    $('.input-zip').mask('00000-000',
      {
        placeholder: "____-___"
      });
    $('.input-money').mask("#.##0,00",
      {
        reverse: true
      });
    $('.input-phoneus').mask('(000) 000-0000');
    $('.input-mixed').mask('AAA 000-S0S');
    $('.input-ip').mask('0ZZ.0ZZ.0ZZ.0ZZ',
      {
        translation:
        {
          'Z':
          {
            pattern: /[0-9]/,
            optional: true
          }
        },
        placeholder: "___.___.___.___"
      });
    // editor
    var editor = document.getElementById('editor');
    if (editor) {
      var toolbarOptions = [
        [
          {
            'font': []
          }],
        [
          {
            'header': [1, 2, 3, 4, 5, 6, false]
          }],
        ['bold', 'italic', 'underline', 'strike'],
        ['blockquote', 'code-block'],
        [
          {
            'header': 1
          },
          {
            'header': 2
          }],
        [
          {
            'list': 'ordered'
          },
          {
            'list': 'bullet'
          }],
        [
          {
            'script': 'sub'
          },
          {
            'script': 'super'
          }],
        [
          {
            'indent': '-1'
          },
          {
            'indent': '+1'
          }], // outdent/indent
        [
          {
            'direction': 'rtl'
          }], // text direction
        [
          {
            'color': []
          },
          {
            'background': []
          }], // dropdown with defaults from theme
        [
          {
            'align': []
          }],
        ['clean'] // remove formatting button
      ];
      var quill = new Quill(editor,
        {
          modules:
          {
            toolbar: toolbarOptions
          },
          theme: 'snow'
        });
    }
    // Example starter JavaScript for disabling form submissions if there are invalid fields
    (function () {
      'use strict';
      window.addEventListener('load', function () {
        // Fetch all the forms we want to apply custom Bootstrap validation styles to
        var forms = document.getElementsByClassName('needs-validation');
        // Loop over them and prevent submission
        var validation = Array.prototype.filter.call(forms, function (form) {
          form.addEventListener('submit', function (event) {
            if (form.checkValidity() === false) {
              event.preventDefault();
              event.stopPropagation();
            }
            form.classList.add('was-validated');
          }, false);
        });
      }, false);
    })();
  </script>
  <script>
    var uptarg = document.getElementById('drag-drop-area');
    if (uptarg) {
      var uppy = Uppy.Core().use(Uppy.Dashboard,
        {
          inline: true,
          target: uptarg,
          proudlyDisplayPoweredByUppy: false,
          theme: 'dark',
          width: 770,
          height: 210,
          plugins: ['Webcam']
        }).use(Uppy.Tus,
          {
            endpoint: 'https://master.tus.io/files/'
          });
      uppy.on('complete', (result) => {
        console.log('Upload complete! We’ve uploaded these files:', result.successful)
      });
    }
  </script>
  <script src="js/apps.js"></script>
  <!-- Global site tag (gtag.js) - Google Analytics -->
  <script async src="https://www.googletagmanager.com/gtag/js?id=UA-56159088-1"></script>
  <script>
    window.dataLayer = window.dataLayer || [];

    function gtag() {
      dataLayer.push(arguments);
    }
    gtag('js', new Date());
    gtag('config', 'UA-56159088-1');
  </script>

  <style>
    .drag-container {
      position: fixed;
      left: 0;
      top: 0;
      z-index: 1000;
    }

    .board {
      position: relative;
      display: flex;
      /* Add flex display to arrange columns horizontally */
      overflow-x: auto;
      /* Add horizontal scrolling */
      width: calc(350px * 4);
      /* Adjust the width based on the number of columns */
    }

    .board-column {
      width: 350px;
      /* Set fixed width for each column */
      margin-right: 10px;
      /* Add some space between columns */
    }


    .board-container {
      overflow-x: auto;
      /* Enable horizontal scrolling */
    }

    .board {
      position: relative;
      display: flex;
      /* Add flex display to arrange columns horizontally */
    }

    .board-column {
      width: 350px;
      /* Set fixed width for each column */

    }

    .board-column.muuri-item-releasing {
      z-index: 2;
    }

    .board-column.muuri-item-dragging {
      z-index: 3;
      cursor: move;
    }

    .board-column-container {
      position: relative;
      width: 100%;
      height: 100%;

    }

    .board-column {
      width: 280px;

        {
          {
          !-- transform: translate(0, 0) !;
          --
        }
      }
    }

    .board-column-header {
      position: relative;
      height: 50px;
      line-height: 50px;
      overflow: hidden;
      padding: 0 20px;
      text-align: center;
      background: #333;
      color: #fff;
      border-radius: 5px 5px 0 0;
      font-weight: bold;
      letter-spacing: 0.5px;
      text-transform: uppercase;
    }

      {
        {
        !-- @media (max-width: 600px) {
          .board-column-header {
            text-indent: -1000px;
          }
        }

        --
      }
    }

    .board-column.todo .board-column-header {
      background: #4A9FF9;
    }

    .board-column.working .board-column-header {
      background: #f9944a;
    }

    .board-column.done .board-column-header {
      background: #2ac06d;
    }

    .board-column-content-wrapper,
    .board-column-header {
      width: 290px !important;
    }

    .board-column-content-wrapper {
      position: relative;
      padding: 8px;
      background: #f0f0f0;
      height: calc(100vh - 90px);
      overflow-y: auto;
      border-radius: 0 0 5px 5px;
    }

    .board-column-content {
      position: relative;
      min-height: 100%;
    }

    .board-item {
      position: absolute;
      width: calc(100% - 16px);
      margin: 8px;
    }

    .board-item.muuri-item-releasing {
      z-index: 9998;
    }

    .board-item.muuri-item-dragging {
      z-index: 9999;
      cursor: move;
    }

    .board-item.muuri-item-hidden {
      z-index: 0;
    }

    .board-item-content {
      position: relative;
      padding: 10px;
      border-radius: 4px;
      font-size: 17px;
      cursor: pointer;
      -webkit-box-shadow: 0px 1px 3px 0 rgba(0, 0, 0, 0.2);
      box-shadow: 0px 1px 3px 0 rgba(0, 0, 0, 0.2);
    }

    @media (max-width: 600px) {
      .board-item-content {
        text-align: center;
      }

      .board-item-content span {
        display: none;
      }
    }
  </style>
  <script>
    const dragStartData = new Map();
    const dragContainer = document.querySelector('.drag-container');
    const itemContainers = [].slice.call(document.querySelectorAll('.board-column-content'));
    const columnGrids = [];
    let boardGrid;

    // Function to update target status
    async function updateTargetStatus(cardId, newTargetStatus) {
      try {
        const response = await fetch('/updateTargetStatus', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            cardId: cardId,
            newTargetStatus: newTargetStatus
          })
        });
        if (!response.ok) {
          throw new Error('Failed to update target status');
        }
        // Optionally handle success response
      } catch (error) {
        console.error('Error updating target status:', error);
      }
    }

    itemContainers.forEach(function (container) {
      const grid = new Muuri(container, {
        items: '.board-item',
        dragEnabled: true,
        dragSort: function () {
          return columnGrids;
        },
        dragContainer: dragContainer,
        dragCssProps: {
          touchAction: 'auto',
          userSelect: 'none',
          userDrag: 'none',
          tapHighlightColor: 'rgba(0, 0, 0, 0)',
          touchCallout: 'none',
          contentZooming: 'none'
        },
        dragStartPredicate: function (item, e) {
          if (e.pointerType === 'touch') {
            if (e.isFirst) {
              const contextMenuListener = e => e.preventDefault();
              const touchMoveListener = (e) => {
                const data = dragStartData.get(item);
                if (data) {
                  if (data.dragAllowed) {
                    e.cancelable && e.preventDefault();
                  } else if (data.dragAllowed === undefined) {
                    if (e.cancelable && e.timeStamp - data.startTimeStamp > 250) {
                      data.dragAllowed = true;
                      e.preventDefault();
                    } else {
                      data.dragAllowed = false;
                    }
                  }
                }
              };
              dragStartData.set(item, {
                dragAllowed: undefined,
                startTimeStamp: e.srcEvent.timeStamp,
                touchMoveListener,
                contextMenuListener
              });
              container.parentNode.addEventListener('touchmove', touchMoveListener, { passive: false, capture: true });
              window.addEventListener('touchmove', touchMoveListener, { passive: false, capture: true });
              item.getElement().addEventListener('contextmenu', contextMenuListener);
              return undefined;
            }
            if (e.isFinal) {
              const data = dragStartData.get(item);
              if (data) {
                container.parentNode.removeEventListener('touchmove', data.touchMoveListener, { passive: false, capture: true });
                window.removeEventListener('touchmove', data.touchMoveListener, { passive: false, capture: true });
                item.getElement().removeEventListener('contextmenu', data.contextMenuListener);
                dragStartData.delete(item);
              }
              return undefined;
            }
            const data = dragStartData.get(item);
            return data ? data.dragAllowed : undefined;
          }
          if (e.isFirst && e.srcEvent.button) {
            return false;
          } else {
            return true;
          }
        },
        dragAutoScroll: {
          targets: (item) => {
            return [
              { element: window, priority: 0 },
              { element: item.getGrid().getElement().parentNode, priority: 1 },
            ];
          }
        },
      })
        .on('dragInit', function (item) {
          item.getElement().style.width = item.getWidth() + 'px';
          item.getElement().style.height = item.getHeight() + 'px';
        })
        .on('dragReleaseEnd', function (item) {
          item.getElement().style.width = '';
          item.getElement().style.height = '';
          item.getGrid().refreshItems([item]);
        })
        .on('layoutStart', function () {
          if (boardGrid) {
            boardGrid.refreshItems().layout();
          }
        });

      columnGrids.push(grid);
    });

    boardGrid = new Muuri('.board', {
      dragEnabled: true,
      dragHandle: '.board-column-header'
    });
    console.log("Attaching dragReleaseEnd event listener to boardGrid...");
    boardGrid.on('dragReleaseEnd', async function (item, event) {
      console.log("dragReleaseEnd event triggered!");
      // Determine if the card is dropped into a different container
      const sourceContainer = item.getGrid().getElement().parentNode;
      const destinationContainer = event.originalEvent.target.closest('.board-column-content');

      console.log("Source container:", sourceContainer);
      console.log("Destination container:", destinationContainer);

      if (sourceContainer !== destinationContainer) {
        try {
          // Extract necessary information (e.g., card ID and target status)
          const cardIdElement = item.getElement().querySelector('.inner-section');
          console.log("Card ID element:", cardIdElement);
          const cardId = cardIdElement.getAttribute('id');
          console.log("Card ID:", cardId);


          const newTargetStatus = destinationContainer.getAttribute('data-target-status');
          console.log("New target status:", newTargetStatus);

          // Update target status
          await updateTargetStatus(cardId, newTargetStatus);
          console.log('Target status updated successfully!');
        } catch (error) {
          console.error('Error updating target status:', error);
        }
      }
    });


  </script>





</body>

</html>
<!doctype html>
<html lang="en">


<head>
    <style>
        dialog {
            width: 40%;
            min-height: 30%;
            position: absolute;
            border: 1px solid lightgray;
            border-radius: 10px;
            padding: 20px;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
        }

        .input-section {
            display: none;
        }

        label {
            margin-bottom: 0.2rem !important;
        }

        input::-webkit-outer-spin-button,
        input::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }

        .new-class {
            text-transform: capitalize;
        }

        #lableName {
            border: 1px solid rgb(185, 185, 185);
            height: 40px;
        }

        .form-control {
            height: 40px !important;
            border: 1px solid rgb(235, 233, 233);
        }
    </style>
</head>

<body class="vertical  light  ">
    <div class="wrapper">
        {{>Sidebar}}
        <main role="main" class="main-content">
            <div class="content-body">
                <div class="container-fluid">
                    <div class="col-lg-8 col-mg-8  col-12 shadow-sm rounded-2 p-4" style="background-color: #FFFF;">
                        <div class=" bg-transparent box-shadow-none">
                            <form
                                class="mainForm leadForm p-0 col-12 col-md-12 w-full d-flex flex-wrap justify-content-between "
                                style="column-gap:30px;">
                                <div class="mb-2 col-12 col-md-5">
                                    <label for="exampleInputEmail1" class="form-label">Lead Name <span
                                            class="font-w900 text-danger">*</span> </label>
                                    <input type="text" class="form-control" id="leadName" name="leadName"
                                        aria-describedby="emailHelp" required />

                                </div>
                                <div class="mb-2 col-12 col-md-5">
                                    <label for="select" class="form-label">Company Name <span
                                            class="font-w900 text-danger">*</span></label>
                                    <select id="selectCompany" name="companyName" class="form-control" required>
                                        <option value="" selected> Select the Company Name</option>
                                        <option>Shubham Mart</option>
                                        <option>Hindustan Petrol</option>
                                        <option>Miles store</option>
                                    </select>
                                </div>

                                <div class="mb-2 col-12 col-md-5">
                                    <label for="exampleInputEmail1" class="form-label">Contact Number <span
                                            class="font-w900 text-danger">*</span></label>
                                    <input type="number" class="form-control" id="contactNum" name="contactNum"
                                        aria-describedby="emailHelp" required />
                                </div>
                                <div class="mb-2 col-12 col-md-5">
                                    <label for="exampleInputEmail1" class="form-label">Contact Email <span
                                            class="font-w900 text-danger">*</span></label>
                                    <input type="email" class="form-control" id="contactNum" autocomplete="off"
                                        name="contactemail" aria-describedby="emailHelp" required />
                                </div>
                                <div class="mb-3 col-12 col-md-5">
                                    <label for="select" class="form-label">Lead Status <span
                                            class="font-w900 text-danger">*</span></label>
                                    <select id="selectstatus" name="selectstatus" class="form-control" required>
                                        <option value=""> Select Lead Status</option>
                                        <option>Pending</option>
                                        <option>Denied </option>
                                        <option>Approval</option>
                                    </select>
                                </div>



                                <div class="mb-3 col-12 col-md-5">
                                    <label for="select" class="form-label">Target Field <span
                                            class="font-w900 text-danger">*</span><i
                                            class="ri-add-circle-line ml-1 plusSelectField"
                                            style="cursor: pointer;"></i></span></label>
                                    <div class="input-section">
                                        <div class="input-group input-group-sm mb-3">
                                            <input name="inputvalue" type="text" class="form-control dropdown-input"
                                                aria-label="Small" aria-describedby="inputGroup-sizing-sm">
                                            <div class="input-group-prepend">
                                                <span
                                                    class="input-group-text bg-primary dropdown-input-add-btn  text-white "
                                                    id="inputGroup-sizing-sm " style="cursor: pointer;">Add</span>
                                            </div>
                                        </div>
                                    </div>
                                    <select id="targetStatus" name="targetStatus" class="form-control target-status"
                                        required>
                                        <option value="" selected> Select Lead Status</option>
                                        {{!-- Value comes dynamically --}}

                                    </select>
                                </div>

                            </form>
                            <div class="d-flex gap-2 col-md-12 col-12">
                                <button type="submit" id="leadSubmitBtn"
                                    class=" btn btn-primary btn-md rounded-1 mt-2">Submit</button>
                                {{!-- {{#if isAdmin}}
                                <button type="button" class="addField btn btn-primary btn-sm rounded-1 mt-2">Add
                                    Field</button>
                                {{else}}
                                {{/if}} --}}
                                <button type="button" class="addField btn ml-3 btn-primary btn-md rounded-1 mt-2">Add
                                    Field</button>
                            </div>
                            <dialog autofocus="true" class="col-md-3 col-10 m-0">
                                <div class="closeBtn float-end d-block " style="width: 25px;float:right">
                                    <svg style="cursor: pointer;" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"
                                        fill="currentColor">
                                        <path
                                            d="M11.9997 10.5865L16.9495 5.63672L18.3637 7.05093L13.4139 12.0007L18.3637 16.9504L16.9495 18.3646L11.9997 13.4149L7.04996 18.3646L5.63574 16.9504L10.5855 12.0007L5.63574 7.05093L7.04996 5.63672L11.9997 10.5865Z">
                                        </path>
                                    </svg>
                                </div>

                                <div class="content mt-1 w-100">
                                    {{!-- making for custom field's --}}
                                    <form class="customFieldForm py-2">
                                        <label for="customField" class="form-label h3 font-w500">Custom Field</label>
                                        <div class="wrapper-div px-0 d-flex align-items-center col-md-12 col-12 flex-wrap py-2"
                                            style="gap: 10px;">
                                            <div
                                                class="d-flex align-items-center col-md-2 col-3 justify-content-start ">
                                                <label for="textField1" class="m-0 font-w500">Date</label>
                                                <input type="radio" name="fields" class="mx-2 rounded" id="textField1"
                                                    value="date">
                                            </div>
                                            <div class="d-flex align-items-center col-md-2 col-3 justify-content-start">
                                                <label for="textField2" class="m-0 font-w500">Text</label>
                                                <input type="radio" name="fields" class="mx-2 rounded" id="textField2"
                                                    value="text">
                                            </div>
                                            <div
                                                class="d-flex align-items-center col-md-3   col-3 justify-content-start">
                                                <label for="textField3" class="m-0 font-w500">Number</label>
                                                <input type="radio" name="fields" class="mx-2 rounded" id="textField3"
                                                    value="number">
                                            </div>
                                            <div class="d-flex align-items-center col-md-2 col-3 justify-content-start">
                                                <label for="textField3" class="m-0 font-w500">Email</label>
                                                <input type="radio" name="fields" class="mx-2 rounded" id="textField4"
                                                    value="email">
                                            </div>
                                        </div>

                                        <div class="my-2 mb-2">
                                            <label for="lableName" class="form-label">Label Name</label>
                                            <input type="text" class="form-control  mb-1 mt-1" name="labelValue"
                                                id="lableName" placeholder="Enter the label name">
                                        </div>

                                        <button type="submit"
                                            class="w-100 btn btn-primary btn-sm rounded-1 mt-2 fieldBtn">Submit</button>
                                    </form>

                                </div>


                            </dialog>
                        </div>
                    </div>

                </div>
            </div>
        </main> <!-- main -->
    </div> <!-- .wrapper -->
    <script src="js/jquery.min.js"></script>
    <script src="js/popper.min.js"></script>
    <script src="js/moment.min.js"></script>
    <script src="js/bootstrap.min.js"></script>
    <script src="js/simplebar.min.js"></script>
    <script src='js/daterangepicker.js'></script>
    <script src='js/jquery.stickOnScroll.js'></script>
    <script src="js/tinycolor-min.js"></script>
    <script src="js/config.js"></script>
    <script src="js/d3.min.js"></script>
    <script src="js/topojson.min.js"></script>
    <script src="js/datamaps.all.min.js"></script>
    <script src="js/datamaps-zoomto.js"></script>
    <script src="js/datamaps.custom.js"></script>
    <script src="js/Chart.min.js"></script>
    <script>
        /* defind global options */
        Chart.defaults.global.defaultFontFamily = base.defaultFontFamily;
        Chart.defaults.global.defaultFontColor = colors.mutedColor;
    </script>
    <script src="js/gauge.min.js"></script>
    <script src="js/jquery.sparkline.min.js"></script>
    <script src="js/apexcharts.min.js"></script>
    <script src="js/apexcharts.custom.js"></script>
    <script src='js/jquery.mask.min.js'></script>
    <script src='js/select2.min.js'></script>
    <script src='js/jquery.steps.min.js'></script>
    <script src='js/jquery.validate.min.js'></script>
    <script src='js/jquery.timepicker.js'></script>
    <script src='js/dropzone.min.js'></script>
    <script src='js/uppy.min.js'></script>
    <script src='js/quill.min.js'></script>
    <script src='js/new.js'></script>
    <script src="https://cdn.jsdelivr.net/npm/muuri@0.9.5/dist/muuri.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/web-animations-js@2.3.2/web-animations.min.js"></script>
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>

    <script src="js/apps.js"></script>



    {{!-- toggle select field --}}
    <script>
        const toggleBtn = document.querySelector('.plusSelectField')
        const inputSection = document.querySelector('.input-section')

        var flag = true;
        toggleBtn.addEventListener('click', () => {
            if (flag) {
                inputSection.style.display = 'block';
                flag = false
            }
            else {
                inputSection.style.display = 'none';
                flag = true
            }
        })
        // appending the data from input
        const dropdownAddBtn = document.querySelector('.dropdown-input-add-btn')
        dropdownAddBtn.addEventListener('click', async () => {
            const dropdownInput = document.querySelector('.dropdown-input').value;
            const targetStatus = document.querySelector('#targetStatus');

            // Post API on Click :/selectoption
            const res = await fetch("/selectoption", {
                headers: {
                    'Content-Type': 'application/json'
                },
                method: 'POST',
                body: JSON.stringify({ dropdownInput })
            });
            const successData = await res.json()
            console.log(successData)
            try {
                if (successData.success === true) {
                    location.reload()
                }
                else{
                    alert(successData.error)
                }
            }
            catch (err) {
                console.log(err)
            }

        });



        window.addEventListener('load', async function () {
            try {
                const response = await fetch('/selectoption');
                const data = await response.json();
                const targetStatus = document.querySelector('.target-status');
                data?.data.forEach((item) => {
                    const option = document.createElement('option');
                    option.value = item.labelName;
                    option.textContent = item.labelName;
                    targetStatus.appendChild(option);
                })
            } catch (error) {
                console.error(error);
            }
        });

    </script>



    <script>
        const leadSubmitBtn = document.querySelector("#leadSubmitBtn");
        leadSubmitBtn.addEventListener('click', async (e) => {
            e.preventDefault();
            await getLeadData();
        });

        async function getLeadData() {
            const form = document.querySelector('.leadForm');
            const formData = new FormData(form);

            // Check if any field is null
            let fieldsAreValid = true;
            formData.forEach((value) => {
                if (!value) {
                    fieldsAreValid = false;
                }
            });

            if (!fieldsAreValid) {
                // Show error message if any field is null
                Toastify({
                    text: "Please fill in all fields",
                    gravity: "top",
                    duration: 3000,
                    close: true,
                    style: {
                        width: '30%'
                    },
                    backgroundColor: "red",
                    position: "center"
                }).showToast();
                return; // Stop further execution
            }

            const obj = Object.fromEntries(formData);
            console.log(obj);

            try {
                const res = await fetch('/lead_data', {
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    method: 'POST',
                    body: JSON.stringify(obj)
                });
                const response = await res.json();
                console.log(response);

                if (response.success) {
                    Toastify({
                        text: "Data stored successfully",
                        gravity: "top",
                        duration: 3000,
                        close: true,
                        style: {
                            width: '30%'
                        },
                        position: "center"
                    }).showToast();

                    // Refresh the page after successful submission
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } else {
                    throw new Error('Failed to store data');
                }
            } catch (error) {
                console.error(error);
                // Show error message
                Toastify({
                    text: "Failed to store data",
                    gravity: "top",
                    duration: 3000,
                    close: true,
                    style: {
                        width: '30%'
                    },
                    backgroundColor: "red",
                    position: "center"
                }).showToast();
            }
        }
    </script>





    <script>
        const btn = document.querySelector(".addField")
        const dialog = document.querySelector("dialog")
        const closeBtn = document.querySelector(".closeBtn")
        btn.addEventListener('click', () => {
            dialog.showModal()
            window.scrollTo({
                behavior: 'smooth',
                top: 0,
                left: 0

            })
        })
        closeBtn.addEventListener('click', function () {
            dialog.close()
        })
    </script>

    <script>

        window.onload = async function () {
            try {
                const res = await fetch('/sendCustomField', {
                    method: 'GET',
                });
                const data = await res.json();
                console.log(data, 123);
                inputFieldAppendData(data);
            } catch (err) {
                console.log(err);
            }
        }

        function inputFieldAppendData(data) {
            const useGroup = localStorage.getItem('userGroup');
            const form = document.querySelector('.mainForm');

            data.data.forEach(item => {

                const fieldHtml = `
        <div class="mb-2 col-12 col-md-5" style="position:relative">
            <i class="delete-icon ri-close-fill" style="position:absolute;right:20px;top:0px;font-size:17px"></i>
            <label for="${item.divId}" class="form-label new-class">${item.labelName}</label>
                <input type="${item.type}" class="form-control customGenrateRow" id="${item.divId}" name="${item.labelName.trim()}">
        </div>
    `;
                form.insertAdjacentHTML('beforeend', fieldHtml);
            });

            // Attach event listeners to delete icons
            const deleteIcons = document.querySelectorAll('.delete-icon');
            deleteIcons.forEach(icon => {
                icon.addEventListener('click', function () {
                    const inputElement = this.parentElement.querySelector('input');

                    if (inputElement) {
                        const id = inputElement.getAttribute('id');
                        console.log("Input Element:", inputElement);
                        console.log("ID:", id);
                        deleteFromDatabase(id);
                        this.parentElement.remove();
                    } else {
                        console.log("Input element not found.");
                    }
                });
            });

        }


    </script>

    <script>
        const customForm = document.querySelector('.fieldBtn');
        customForm.addEventListener('click', async (event) => {
            event.preventDefault();
            const radios = document.getElementsByName('fields');
            let radioVal;
            for (var radio of radios) {
                radio.checked ? radioVal = radio.value : null;
            }

            const labelVal = document.getElementById('lableName').value;
            const labelIdElement = document.querySelector('.customGenrateRow');
            const customId = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);

            const labelId = customId;

            try {
                const res = await fetch('/sendCustomField', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        labelName: labelVal,
                        name: radioVal,
                        divId: labelId,
                        type: radioVal
                    })
                });

                const data = await res.json();
                if (data.success) {
                    alert('Field Added Successfully');
                }
                location.reload();
            } catch (error) {
                console.log(error);
            }
        });
    </script>

    <script>
        function deleteItem(id) {
            console.log('ID:', id); // Log the id parameter

            deleteFromDatabase(id);
        }

        function deleteFromDatabase(id) {
            fetch(`/sendCustomField/${id}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                // No need to stringify the body, as the id is already in the URL
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Item deleted successfully');
                    // Optionally, you can perform further actions after successful deletion
                })
                .catch(error => {
                    console.error('There was a problem deleting the item:', error);
                });
        }

    </script>




</body>

</html>